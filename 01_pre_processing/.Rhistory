#load and tidy metadata
meta <- readRDS(file= here::here(".././data-raw/meta_20230126.rda"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source(here::here("./R/functions.R"))
source("C:/Users/kirmac/OneDrive - Karolinska Institutet/Kirstin/Projects/2022_01, HIF1a-KO clock execise/Analysis/transcriptomics_project/01_pre_processing/R/functions.R")
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
dir.create(here::here(".out/filt/PCA_plots"))
dir.create(here::here("./out/filt/PCA_plots"))
source("~/.active-rstudio-document", echo=TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source(here::here("./R/functions.R"))
library(viridis)
library(DESeq2)
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
# Chunk 2: data prep
#load and tidy metadata
meta <- readRDS(file= here::here(".././data-raw/meta_20230126.rda"))
#load and tidy count data file
load(file= here::here(".././data-raw/count_raw/counts.rda"))
dat <- tidy_raw_counts_fun(counts)
#clean up
rm(counts)
head(dat)
colSums(dat)
summary <- colSums(dat)
summary <- colSums(dat) |> as.data.frame()
View(summary)
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`))
View(summary)
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
View(summary)
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
summary
dat <- dat[,colnames(dat)!= "0156_44"]
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
summary
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source(here::here("./R/functions.R"))
library(viridis)
library(DESeq2)
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source(here::here("./R/functions.R"))
library(viridis)
library(DESeq2)
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
write.txt(dat, here::here("../data-raw/count_raw/counts.csv"))
write.table(dat, here::here("../data-raw/count_raw/counts.txt"))
dat <- tidy_raw_counts_fun(counts)
#load and tidy metadata
meta <- readRDS(file= here::here(".././data-raw/meta_20230126.rda"))
#load and tidy count data file
load(file= here::here(".././data-raw/count_raw/counts.rda"))
dat <- tidy_raw_counts_fun(counts)
#clean up
rm(counts)
write.table(dat, here::here("../data-raw/count_raw/counts.txt"))
write.table(dat, here::here("../data-raw/count_raw/counts.txt"), sep = "\t")
write.table(meta, here::here("../data-raw/count_raw/meta.txt"))
write.table(dat, here::here("../data-raw/count_raw/counts.txt"), sep = ";")
write.table(meta, here::here("../data-raw/count_raw/meta.txt"), sep = ";")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source(here::here("./R/functions.R"))
library(viridis)
library(DESeq2)
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
# Chunk 2: data prep
#load and tidy metadata
meta <- readRDS(file= here::here(".././data-raw/meta_20230126.rda"))
#load and tidy count data file
load(file= here::here(".././data-raw/count_raw/counts.rda"))
dat <- tidy_raw_counts_fun(counts)
#clean up
rm(counts)
# Chunk 3
write.table(dat, here::here("../data-raw/count_raw/counts.txt"), sep = ";")
write.table(meta, here::here("../data-raw/count_raw/meta.txt"), sep = ";")
# Chunk 4
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
dat <- dat[,colnames(dat)!= "0156_44"]
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
# Chunk 5: QC
#make dataframes for plots
sum_counts <- sum_counts_fun(dat)
logCounts <- logCounts_fun(data = dat)
vst_counts <- DESeq2::vst(as.matrix(dat))
dat_long <- dat_long_fun(dat)
vst_counts_long <- dat_long_fun(vst_counts)
# histogram
raw_counts_histogram <- histo_fun(data = sum_counts, var = sum_counts$V1, bins = 15, title = "raw counts histogram")
#sum counts bar plot
sum_counts_barplot <- sum_count_plot_fun(sum_counts)
#boxplot
boxplot_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= dat_long$values,
title= "raw count boxplot", ylab= "counts", xlab= "sample")
#mean vs sd per gene
pdf(here::here("./out/filt/sd_vs_mean_raw_counts_plot.pdf"))
plot(matrixStats::rowMeans2(as.matrix(dat)), matrixStats::rowSds(as.matrix(dat)),
main='Raw counts: sd vs mean', xlim=c(0,10000), ylim=c(0,5000))
dev.off()
# log 2 count boxplot
boxplot_log2_raw_counts<- boxplot_function(data= dat_long, x= dat_long$id, y= log2(dat_long$values),
title= "log2 count boxplot", ylab= "log2(counts)", xlab= "sample")
boxplot_log2_raw_counts
# vst boxplot
boxplot_vst_norn_counts<- boxplot_function(data= vst_counts_long, x= vst_counts_long$id, y= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
#save plots
ggplot2::ggsave(plot = raw_counts_histogram, filename = "raw_counts_histogram.pdf", path = here::here("./out/raw/"), 7, 7)
#save plots
ggplot2::ggsave(plot = raw_counts_histogram, filename = "raw_counts_histogram.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = sum_counts_barplot, filename = "sum_counts_barplot.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_raw_counts, filename = "boxplot_raw_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_log2_raw_counts, filename = "boxplot_log2_raw_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_vst_norn_counts, filename = "boxplot_vst_norn_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
#clean up
rm(sum_counts, logCounts, vst_counts, dat_long, vst_counts_long, raw_counts_histogram, sum_counts_barplot,
boxplot_raw_counts, boxplot_log2_raw_counts, boxplot_vst_norn_counts)
keep <- rowSums(dat) > 1
filt_dat <- dat[keep, ]
#make dataframes for plots
sum_counts <- sum_counts_fun(filt_dat)
logCounts <- logCounts_fun(data = filt_dat)
vst_counts <- DESeq2::vst(as.matrix(filt_dat))
dat_long <- dat_long_fun(filt_dat)
vst_counts_long <- dat_long_fun(vst_counts)
# histogram
raw_counts_histogram <- histo_fun(data = sum_counts, var = sum_counts$V1, bins = 15, title = "raw counts histogram")
#sum counts bar plot
sum_counts_barplot <- sum_count_plot_fun(sum_counts)
#boxplot
boxplot_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= dat_long$values,
title= "raw count boxplot", ylab= "counts", xlab= "sample")
#mean vs sd per gene
pdf(here::here("./out/filt/sd_vs_mean_raw_counts_plot.pdf"))
plot(matrixStats::rowMeans2(as.matrix(filt_dat)), matrixStats::rowSds(as.matrix(filt_dat)),
main='Raw counts: sd vs mean', xlim=c(0,10000), ylim=c(0,5000))
dev.off()
# log 2 count boxplot
boxplot_log2_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= log2(dat_long$values),
title= "log2 count boxplot", ylab= "log2(counts)", xlab= "sample")
# vst boxplot
boxplot_vst_norn_counts<- boxplot_function(data= vst_counts_long, xvar= vst_counts_long$id, yvar= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
boxplot_vst_norn_counts
#save plots
ggplot2::ggsave(plot = raw_counts_histogram, filename = "raw_counts_histogram.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = sum_counts_barplot, filename = "sum_counts_barplot.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_raw_counts, filename = "boxplot_raw_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_log2_raw_counts, filename = "boxplot_log2_raw_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_vst_norn_counts, filename = "boxplot_vst_norn_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
#clean up
rm(keep, filt_dat, sum_counts, logCounts, vst_counts, dat_long, vst_counts_long, raw_counts_histogram, sum_counts_barplot,
boxplot_raw_counts, boxplot_log2_raw_counts, boxplot_vst_norn_counts)
meta <- meta |> dplyr::filter(id!= "0156_44")
dat <- dat[,colnames(dat)!= "0156_44"]
nrow(meta)== ncol(dat) #check number of samples are the same
#check boxplot
keep <- rowSums(dat) > 1 #filt dat for plotting
filt_dat <- dat[keep, ]
vst_counts <- DESeq2::vst(as.matrix(filt_dat))
dat_long <- dat_long_fun(filt_dat)
vst_counts_long <- dat_long_fun(vst_counts)
boxplot_vst_norn_counts_sample_excl<- boxplot_function(data= vst_counts_long, xvar= vst_counts_long$id, yvar= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
ggplot2::ggsave(plot = boxplot_vst_norn_counts_sample_excl, filename = "boxplot_vst_norn_counts_sample_excl.pdf", path = here::here("./out/filt/"), height = 7, width = 5)
boxplot_vst_norn_counts_sample_excl
install.packages("htmltools")
install.packages("htmltools")
# Chunk 1: setup
source(here::here("./R/functions.R"))
library(viridis)
library(DESeq2)
dir.create(here::here("./out/raw"))
dir.create(here::here("./out/filt"))
# Chunk 2: data prep
#load and tidy metadata
meta <- readRDS(file= here::here(".././data-raw/meta_20230126.rda"))
#load and tidy count data file
load(file= here::here(".././data-raw/count_raw/counts.rda"))
dat <- tidy_raw_counts_fun(counts)
#clean up
rm(counts)
# Chunk 3
write.table(dat, here::here("../data-raw/count_raw/counts.txt"), sep = ";")
write.table(meta, here::here("../data-raw/count_raw/meta.txt"), sep = ";")
# Chunk 4
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
dat <- dat[,colnames(dat)!= "0156_44"]
summary <- colSums(dat) |>
as.data.frame() |>
dplyr::summarise(mean = mean(`colSums(dat)`),
sd = sd(`colSums(dat)`),
min = min(`colSums(dat)`),
max = max(`colSums(dat)`))
# Chunk 5: QC
#make dataframes for plots
sum_counts <- sum_counts_fun(dat)
logCounts <- logCounts_fun(data = dat)
vst_counts <- DESeq2::vst(as.matrix(dat))
dat_long <- dat_long_fun(dat)
vst_counts_long <- dat_long_fun(vst_counts)
# histogram
raw_counts_histogram <- histo_fun(data = sum_counts, var = sum_counts$V1, bins = 15, title = "raw counts histogram")
#sum counts bar plot
sum_counts_barplot <- sum_count_plot_fun(sum_counts)
#boxplot
boxplot_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= dat_long$values,
title= "raw count boxplot", ylab= "counts", xlab= "sample")
#mean vs sd per gene
pdf(here::here("./out/filt/sd_vs_mean_raw_counts_plot.pdf"))
plot(matrixStats::rowMeans2(as.matrix(dat)), matrixStats::rowSds(as.matrix(dat)),
main='Raw counts: sd vs mean', xlim=c(0,10000), ylim=c(0,5000))
dev.off()
# log 2 count boxplot
boxplot_log2_raw_counts<- boxplot_function(data= dat_long, x= dat_long$id, y= log2(dat_long$values),
title= "log2 count boxplot", ylab= "log2(counts)", xlab= "sample")
boxplot_log2_raw_counts
# vst boxplot
boxplot_vst_norn_counts<- boxplot_function(data= vst_counts_long, x= vst_counts_long$id, y= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
#save plots
ggplot2::ggsave(plot = raw_counts_histogram, filename = "raw_counts_histogram.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = sum_counts_barplot, filename = "sum_counts_barplot.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_raw_counts, filename = "boxplot_raw_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_log2_raw_counts, filename = "boxplot_log2_raw_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_vst_norn_counts, filename = "boxplot_vst_norn_counts.pdf", path = here::here("./out/raw/"), height = 7, width= 7)
#clean up
rm(sum_counts, logCounts, vst_counts, dat_long, vst_counts_long, raw_counts_histogram, sum_counts_barplot,
boxplot_raw_counts, boxplot_log2_raw_counts, boxplot_vst_norn_counts)
# Chunk 6: QC-filtered data
keep <- rowSums(dat) > 1
filt_dat <- dat[keep, ]
#make dataframes for plots
sum_counts <- sum_counts_fun(filt_dat)
logCounts <- logCounts_fun(data = filt_dat)
vst_counts <- DESeq2::vst(as.matrix(filt_dat))
dat_long <- dat_long_fun(filt_dat)
vst_counts_long <- dat_long_fun(vst_counts)
# histogram
raw_counts_histogram <- histo_fun(data = sum_counts, var = sum_counts$V1, bins = 15, title = "raw counts histogram")
#sum counts bar plot
sum_counts_barplot <- sum_count_plot_fun(sum_counts)
#boxplot
boxplot_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= dat_long$values,
title= "raw count boxplot", ylab= "counts", xlab= "sample")
#mean vs sd per gene
pdf(here::here("./out/filt/sd_vs_mean_raw_counts_plot.pdf"))
plot(matrixStats::rowMeans2(as.matrix(filt_dat)), matrixStats::rowSds(as.matrix(filt_dat)),
main='Raw counts: sd vs mean', xlim=c(0,10000), ylim=c(0,5000))
dev.off()
# log 2 count boxplot
boxplot_log2_raw_counts<- boxplot_function(data= dat_long, xvar= dat_long$id, yvar= log2(dat_long$values),
title= "log2 count boxplot", ylab= "log2(counts)", xlab= "sample")
# vst boxplot
boxplot_vst_norn_counts<- boxplot_function(data= vst_counts_long, xvar= vst_counts_long$id, yvar= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
boxplot_vst_norn_counts
#save plots
ggplot2::ggsave(plot = raw_counts_histogram, filename = "raw_counts_histogram.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = sum_counts_barplot, filename = "sum_counts_barplot.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_raw_counts, filename = "boxplot_raw_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_log2_raw_counts, filename = "boxplot_log2_raw_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
ggplot2::ggsave(plot = boxplot_vst_norn_counts, filename = "boxplot_vst_norn_counts.pdf", path = here::here("./out/filt/"), height = 7, width= 7)
#clean up
rm(keep, filt_dat, sum_counts, logCounts, vst_counts, dat_long, vst_counts_long, raw_counts_histogram, sum_counts_barplot,
boxplot_raw_counts, boxplot_log2_raw_counts, boxplot_vst_norn_counts)
# Chunk 7: sample exclusion
meta <- meta |> dplyr::filter(id!= "0156_44")
dat <- dat[,colnames(dat)!= "0156_44"]
nrow(meta)== ncol(dat) #check number of samples are the same
#check boxplot
keep <- rowSums(dat) > 1 #filt dat for plotting
filt_dat <- dat[keep, ]
vst_counts <- DESeq2::vst(as.matrix(filt_dat))
dat_long <- dat_long_fun(filt_dat)
vst_counts_long <- dat_long_fun(vst_counts)
boxplot_vst_norn_counts_sample_excl<- boxplot_function(data= vst_counts_long, xvar= vst_counts_long$id, yvar= vst_counts_long$values,
title= "vst normalised count boxplot", ylab= "vst normalised counts", xlab= "sample")
ggplot2::ggsave(plot = boxplot_vst_norn_counts_sample_excl, filename = "boxplot_vst_norn_counts_sample_excl.pdf", path = here::here("./out/filt/"), height = 7, width = 5)
boxplot_vst_norn_counts_sample_excl
# Chunk 8: Create DESeq object
library(DESeq2)
#re-order row names in meta test to match column names in FPKM data frame
meta <- meta[match(colnames(dat), meta$id),]
all(colnames(dat)==meta$id) #check
#construct DESeq dataset object (DDS) from matrix of counts and meta data table
dds <- DESeq2::DESeqDataSetFromMatrix(countData = dat,
colData = meta,
design = ~sex + genotype + zt + exercise)
#Pre filter dataset:
#Remove genes with no counts or only 1  count across all samples, this will incerase the speed of the functions.
keep <- rowSums(counts(dds) >= 1) >= 4
dds <- dds[keep,]
# Chunk 9: heatmap Euclidian samples distances
# normalise count data using rlog.
rld <- DESeq2::rlog(dds, blind = FALSE)
# calculate sample distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$id, rld$exercise, rld$genotype, sep="-" )
colnames(sampleDistMatrix) <- NULL
# create heatmap
ha1 <- ComplexHeatmap::HeatmapAnnotation(
df = colData(dds)[, c("genotype", "exercise")],
col = list(
genotype = c("ko" = "maroon", "wt" = "salmon"),
exercise = c("ex" = "lightblue", "sed" = "darkblue")
)
)
pdf(here::here("./out/filt/heatmap_sample_dist.pdf"), width= 10, height= 12)
ComplexHeatmap::Heatmap(sampleDistMatrix,
name = "poisson distance",
show_row_name = TRUE,
show_column_names = FALSE,
cluster_rows = FALSE,
cluster_columns = FALSE,
col=viridis::viridis(100),
rect_gp = grid::gpar(col = "lightgrey", lwd = 0.3),
top_annotation = ha1
)
dev.off()
pdf(here::here("./out/filt/heatmap_sample_dist_cluster.pdf"), width= 10, height= 12)
ComplexHeatmap::Heatmap(sampleDistMatrix,
name = "poisson distance",
show_row_name = TRUE,
show_column_names = FALSE,
cluster_rows = FALSE,
cluster_columns = TRUE,
col=viridis::viridis(100),
rect_gp = grid::gpar(col = "lightgrey", lwd = 0.3),
top_annotation = ha1
)
dev.off()
#clean up
rm(keep, sampleDistMatrix, ha1)
# Chunk 10: PCA plots
dir.create(here::here("./out/filt/PCA_plots"))
#tidy meta for plotting
meta_PCA <- meta_dat_tidy_fun(meta)
#create data frames with sample distances
var_PCA <- var_PCA_fun(assay(rld))
pca_dat <- pca_dat_fun(assay(rld), meta_PCA)
#Scree plot
scree_plot <- scree_plot_fun(assay(rld))
plot_save_function("scree_plot.png",  scree_plot,  here::here('./out/filt/PCA_plots'), width=7, height=4)
#PCA plot labels
PC1_PC2_plots_label <-plot_PC1_PC2_label_fun(data=pca_dat)
PC2_PC3_plots_label <-plot_PC2_PC3_label_fun(data=pca_dat)
# PCA plots
PC1_PC2_plots <-plot_PC1_PC2_fun(data=pca_dat)
PC2_PC3_plots <-plot_PC2_PC3_fun(data=pca_dat)
PC1_PC2_plots$PC1_PC2_genotype
PC1_PC2_plots$PC1_PC2_zt
PC1_PC2_plots$PC1_PC2_exercise
PC1_PC2_plots$PC1_PC2_sex
#save plots
plot_list_save_function(PC1_PC2_plots,  save_chr= NULL, here::here('./out/filt/PCA_plots'), width=7, height=4)
plot_list_save_function(PC2_PC3_plots,  save_chr= NULL, here::here('./out/filt/PCA_plots'), width=7, height=4)
ggplot2::ggsave(filename = "PC1_PC2_labels_plot.png", plot = PC1_PC2_plots_label, path = here::here('./out/filt/PCA_plots'), width= 7, height= 4)
plot_save_function(filename = "PC2_PC3_labels_plot.png", plot = PC2_PC3_plots_label, path = here::here('./out/filt/PCA_plots'), width= 7, height= 4)
